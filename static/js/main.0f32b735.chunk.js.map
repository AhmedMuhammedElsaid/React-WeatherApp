{"version":3,"sources":["Components/FormComp.js","Components/Weather.js","App.js","serviceWorker.js","index.js"],"names":["FormComp","props","onSubmit","getWeather","type","name","placeholder","Weather","className","temp","city","country","humidity","desc","error","apiKey","App","state","e","a","async","preventDefault","target","elements","value","fetch","api","json","data","console","log","setState","main","sys","weather","description","this","Component","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"wOAgBeA,EAdE,SAACC,GAEV,OACI,6BACE,0BAAMC,SAAUD,EAAME,YACxB,2BAAOC,KAAK,OAAOC,KAAK,OAAOC,YAAY,mBAC3C,2BAAOF,KAAK,OAAOC,KAAK,UAAUC,YAAY,uBAC9C,4BAAQF,KAAK,UAAb,kBCqCGG,EA5CC,SAAAN,GACd,OACE,yBAAKO,UAAU,QACZP,EAAMQ,MACL,uBAAGD,UAAU,YAAb,eAEc,0BAAMA,UAAU,cAAhB,IAA+BP,EAAMQ,KAArC,MAGfR,EAAMS,MACL,uBAAGF,UAAU,YAAb,SAEQ,0BAAMA,UAAU,cAAhB,IAA+BP,EAAMS,KAArC,MAGTT,EAAMU,SACL,uBAAGH,UAAU,YAAb,YAEW,0BAAMA,UAAU,cAAhB,IAA+BP,EAAMU,QAArC,MAGZV,EAAMW,UACL,uBAAGJ,UAAU,YAAb,aAEY,0BAAMA,UAAU,cAAhB,IAA+BP,EAAMW,SAArC,MAGbX,EAAMY,MACL,uBAAGL,UAAU,YAAb,eAEc,0BAAMA,UAAU,cAAhB,IAA+BP,EAAMY,KAArC,MAIfZ,EAAMa,OACL,uBAAGN,UAAU,YAEX,0BAAMA,UAAU,cAAhB,IAA+BP,EAAMa,MAArC,QC/BJC,EAAS,mCACMC,E,2MACnBC,MAAQ,CACNR,KAAK,GACLC,KAAK,GACLC,QAAQ,GACRC,SAAS,GACTC,KAAK,GACLC,MAAM,I,EAGVX,WAAY,SAAOe,GAAP,qBAAAC,EAAAC,OAAA,uDACVF,EAAEG,iBACIX,EAAKQ,EAAEI,OAAOC,SAASb,KAAKc,MAC5Bb,EAAQO,EAAEI,OAAOC,SAASZ,QAAQa,MAH9B,WAAAL,EAAA,MAIMM,MAAM,oDAAD,OAAqDf,EAArD,YAA6DC,EAA7D,kBAA8EI,KAJzF,cAIJW,EAJI,kBAAAP,EAAA,MAKOO,EAAIC,QALX,OAKJC,EALI,OAMVC,QAAQC,IAAIF,GACXjB,GAASD,EACV,EAAKqB,SAAS,CACZtB,KAAKmB,EAAKI,KAAKvB,KACfC,KAAKkB,EAAKvB,KACVM,QAAQiB,EAAKK,IAAItB,QACjBC,SAASgB,EAAKI,KAAKpB,SACnBC,KAAKe,EAAKM,QAAQ,GAAGC,YACrBrB,MAAM,KAGL,EAAKiB,SAAS,CACnBtB,KAAK,GACLC,KAAK,GACLC,QAAQ,GACRC,SAAS,GACTC,KAAK,GACLC,MAAM,2BAvBM,uC,wEA2BZ,OACE,yBAAKN,UAAU,WACjB,yBAAKA,UAAU,kBACb,kBAAC,EAAD,CAAUL,WAAYiC,KAAKjC,aAC7B,kBAAC,EAAD,CACAM,KAAM2B,KAAKnB,MAAMR,KACjBC,KAAM0B,KAAKnB,MAAMP,KACjBC,QAASyB,KAAKnB,MAAMN,QACpBC,SAAUwB,KAAKnB,MAAML,SACrBC,KAAMuB,KAAKnB,MAAMJ,KACjBC,MAAOsB,KAAKnB,MAAMH,c,GA/CeuB,aCGbC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD6H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,iB","file":"static/js/main.0f32b735.chunk.js","sourcesContent":["import React from 'react';\r\n\r\n const FormComp= (props) => {\r\n  \r\n        return (\r\n            <div>\r\n              <form onSubmit={props.getWeather}>\r\n            <input type=\"text\" name=\"city\" placeholder=\"Enter You City\"/>\r\n            <input type=\"text\" name=\"country\" placeholder=\"Enter Your Country\"/>\r\n            <button type=\"submit\">Get Weather</button>\r\n              </form>\r\n            </div>\r\n        )\r\n    \r\n}\r\n\r\nexport default FormComp","import React, { Component } from \"react\";\r\n\r\nconst Weather = props => {\r\n  return (\r\n    <div className=\"info\">\r\n      {props.temp && (\r\n        <p className=\"info-key\">\r\n          \r\n          Tempreture :<span className=\"info-value\"> {props.temp} </span>\r\n        </p>\r\n      )}\r\n      {props.city && (\r\n        <p className=\"info-key\">\r\n          \r\n          City :<span className=\"info-value\"> {props.city} </span>\r\n        </p>\r\n      )}\r\n      {props.country && (\r\n        <p className=\"info-key\">\r\n          \r\n          country :<span className=\"info-value\"> {props.country} </span>\r\n        </p>\r\n      )}\r\n      {props.humidity && (\r\n        <p className=\"info-key\">\r\n          \r\n          humidity :<span className=\"info-value\"> {props.humidity} </span>\r\n        </p>\r\n      )}\r\n      {props.desc && (\r\n        <p className=\"info-key\">\r\n          \r\n          Description <span className=\"info-value\"> {props.desc} </span>\r\n        </p>\r\n      )}\r\n\r\n      {props.error && (\r\n        <p className=\"info-key\">\r\n         \r\n          <span className=\"info-value\"> {props.error} </span>\r\n        </p>\r\n      )}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Weather;\r\n","import React, { Component } from 'react'\nimport FormComp from './Components/FormComp'\nimport Weather from './Components/Weather';\nimport './index.css'\n\n\n//API link\n//http://api.openweathermap.org/data/2.5/weather?q=cairo,egypt&appid=e36ed364400282e43250b6c4c0274d44\nconst apiKey = \"98e689a1b4a71c0554783a432fc71cd7\";\nexport default class App extends Component {\n  state = {\n    temp:\"\",\n    city:\"\",\n    country:\"\",\n    humidity:'',\n    desc:\"\",\n    error:\"\"\n  }\n\ngetWeather= async (e) => {\n  e.preventDefault();\n  const city=e.target.elements.city.value;\n  const country=e.target.elements.country.value;\n  const api=await fetch(`http://api.openweathermap.org/data/2.5/weather?q=${city},${country}&appid=${apiKey}`)\n  const data=await api.json();\n  console.log(data)\nif(country&&city){\n  this.setState({\n    temp:data.main.temp,\n    city:data.name,\n    country:data.sys.country,\n    humidity:data.main.humidity,\n    desc:data.weather[0].description,\n    error:\"\"\n  })\n}\nelse{this.setState({\ntemp:\"\",\ncity:\"\",\ncountry:\"\",\nhumidity:'',\ndesc:\"\",\nerror:\"Please Enter Your City\"})}\n}\n\nrender(){\nreturn(\n  <div className=\"wrapper\">\n<div className=\"form-container\">\n  <FormComp getWeather={this.getWeather}/>\n<Weather\ntemp={this.state.temp}\ncity={this.state.city}\ncountry={this.state.country}\nhumidity={this.state.humidity}\ndesc={this.state.desc}\nerror={this.state.error}\n/>\n</div>\n</div>\n)\n\n}\n}","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}